#include <iostream>
using namespace std;

class Complex {
private:
    float real;
    float imag;

public:
    // Constructor
    Complex(float r = 0, float i = 0) {
        real = r;
        imag = i;
    }

    // Overload + operator
    Complex operator+(const Complex& obj) {
        return Complex(real + obj.real, imag + obj.imag);
    }

    // Overload - operator
    Complex operator-(const Complex& obj) {
        return Complex(real - obj.real, imag - obj.imag);
    }

    // Overload * operator
    Complex operator*(const Complex& obj) {
        float r = real * obj.real - imag * obj.imag;
        float i = real * obj.imag + imag * obj.real;
        return Complex(r, i);
    }

    // Overload == operator
    bool operator==(const Complex& obj) {
        return (real == obj.real && imag == obj.imag);
    }

    // Overload >> operator (input)
    friend istream& operator>>(istream& in, Complex& C) {
        cout << "Enter real part: ";
        in >> C.real;
        cout << "Enter imaginary part: ";
        in >> C.imag;
        return in;
    }

    // Overload << operator (output)
    friend ostream& operator<<(ostream& out, const Complex& C) {
        out << C.real << " + " << C.imag << "i";
        return out;
    }
};

int main() {
    Complex c1, c2;

    cout << "Enter first complex number:" << endl;
    cin >> c1;

    cout << "Enter second complex number:" << endl;
    cin >> c2;

    Complex c3 = c1 + c2;
    Complex c4 = c1 - c2;
    Complex c5 = c1 * c2;

    cout << "Sum: " << c3 << endl;
    cout << "Difference: " << c4 << endl;
    cout << "Product: " << c5 << endl;

    if (c1 == c2)
        cout << "The complex numbers are equal." << endl;
    else
        cout << "The complex numbers are not equal." << endl;

    return 0;
}
